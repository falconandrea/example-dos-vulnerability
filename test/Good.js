const { expect } = require('chai');
const hre = require('hardhat');

describe('Denial of Service', () => {
  it('Shoulder set a new winner', async () => {
    const good = await hre.ethers.deployContract('Good')
    await good.waitForDeployment()

    const [_, address1, address2] = await hre.ethers.getSigners()

    // Set a new winner
    await expect(good.connect(address1).setCurrentAuctionPrice({
      value: hre.ethers.parseEther('0.5')
    })).to.be.not.reverted

    // Check the new winner
    const currentWinner = await good.currentWinner()
    expect(currentWinner).to.equal(address1.address)

    // Revert if value is less than previous winner
    await expect(good.connect(address2).setCurrentAuctionPrice({
      value: hre.ethers.parseEther('0.4')
    })).to.be.revertedWith("Need to pay more than the currentAuctionPrice")
  })

  it('Attacker should block the next winner', async () => {
    const good = await hre.ethers.deployContract('Good')
    await good.waitForDeployment()

    const attack = await hre.ethers.deployContract('Attack', [good.target])
    await attack.waitForDeployment()

    const [_, address1, address2] = await hre.ethers.getSigners()

    // Set a new winner
    await expect(good.connect(address1).setCurrentAuctionPrice({
      value: hre.ethers.parseEther('0.5')
    })).to.be.not.reverted

    // Check the new winner
    let currentWinner = await good.currentWinner()
    expect(currentWinner).to.equal(address1.address)

    // Attack
    await expect(attack.attack({
      value: hre.ethers.parseEther('1')
    })).to.be.not.reverted

    // Check if the attacker is the new winner
    currentWinner = await good.currentWinner()
    expect(currentWinner).to.be.equal(attack.target)

    // Try to change winner
    await expect(good.connect(address2).setCurrentAuctionPrice({
      value: hre.ethers.parseEther('1.5')
    })).to.be.not.reverted

    // Check winner didn't change
    currentWinner = await good.currentWinner()
    expect(currentWinner).to.be.equal(attack.target)
  })
})
